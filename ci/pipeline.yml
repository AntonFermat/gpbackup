---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: gpbackup
  type: git
  source:
    uri: https://github.com/greenplum-db/gpbackup
    branch: master
    ignore_paths:
    - ci

- name: gpbackup-ci
  type: git
  source:
    uri: https://github.com/greenplum-db/gpbackup
    branch: master
    paths:
    - ci

- name: gpdb5_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 5X_STABLE
    tag_filter: 5.*

- name: bin_gpdb5
  type: s3
  source:
      bucket: gpdb5-release-builds
      versioned_file: bin_gpdb_centos6/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{bucket-access-key-id}}
      secret_access_key: {{bucket-secret-access-key}}

- name: ccp_src
  type: git
  source:
    branch: {{ccp-git-branch}}
    private_key: {{ccp-git-key}}
    uri: {{ccp-git-remote}}
    tag_filter: 1.0.0-beta.1

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: {{tf-bucket-path}}

jobs:
- name: units
  serial: true
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: gpbackup-ci
  - task: unit-tests
    file: gpbackup-ci/ci/tasks/unit-tests.yml

- name: integrations-GPDB5
  serial: true
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: gpbackup-ci
    - get: bin_gpdb5
    - get: gpdb5_src
    - get: ccp_src
  - put: terraform
    params:
      <<: *ccp_create_params
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb5
      gpdb_src: gpdb5_src
    on_failure:
      <<: *ccp_destroy
  - task: integration-tests
    config:
        platform: linux

        image_resource:
          type: docker-image
          source:
            repository: pivotaldata/centos-gpdb-dev
            tag: '6-gcc6.2-llvm3.7'

        inputs:
        - name: gpbackup
          path: go/src/github.com/greenplum-db/gpbackup
        - name: bin_gpdb5
        - name: gpdb5_src
        - name: ccp_src
        - name: cluster_env_files

        run:
          path: bash
          args:
          - -c
          - |
            set -ex

            ccp_src/aws/setup_ssh_to_cluster.sh

            cat <<SCRIPT > /tmp/run_tests.bash
            export GOPATH=/home/gpadmin/go
            export PATH=\$GOPATH/bin:/usr/local/go/bin:$PATH

            pushd \$GOPATH/src/github.com/greenplum-db/gpbackup
                make depend
            popd

            chown gpadmin:gpadmin -R \$GOPATH
            source /usr/local/greenplum-db-devel/greenplum_path.sh
            export PGPORT=5432
            export MASTER_DATA_DIRECTORY=/data/gpdata/master/gpseg-1

            cd \$GOPATH/src/github.com/greenplum-db/gpbackup
            make integration
            SCRIPT

            ssh -t centos@mdw "sudo yum -y install wget git && wget https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz && tar -xzf go1.8.3.linux-amd64.tar.gz && sudo mv go /usr/local"
            chmod +x /tmp/run_tests.bash
            scp /tmp/run_tests.bash mdw:/home/gpadmin/run_tests.bash
            ssh -t mdw "mkdir -p /home/gpadmin/go/src/github.com/greenplum-db"
            scp -r go/src/github.com/greenplum-db/gpbackup mdw:/home/gpadmin/go/src/github.com/greenplum-db/gpbackup
            ssh -t mdw "bash /home/gpadmin/run_tests.bash"
    on_failure:
      <<: *debug_sleep
  - *ccp_destroy

ccp_create_params_anchor: &ccp_create_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/aws/
  vars:
    aws_instance-node-instance_type: t2.medium

ccp_destroy_anchor: &ccp_destroy
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/aws/
    vars:
      aws_instance-node-instance_type: t2.micro
  get_params:
    action: destroy

debug_sleep_anchor: &debug_sleep
  do:
  - task: debug_sleep
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
          tag: latest
      run:
        path: 'sh'
        args: ['-c', 'sleep 2h']
  ensure:
    <<: *ccp_destroy
